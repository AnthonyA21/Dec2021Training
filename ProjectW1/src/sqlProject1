1. Get 10 cities in descending alphabetical order.
SELECT City FROM City ORDER BY City DESC LIMIT 10;

2. Get all films with "airplane" in the title.
SELECT * FROM Film WHERE Title LIKE '%airplane%';

3. Get the highest payment amount.
SELECT MAX(amount) from Payment;

4. Get the number of records in the customer table for store id #1.
SELECT COUNT(Customer_ID) FROM Customer WHERE Store_id = 1;

5. Get all payment records for customer with email address "NANCY.THOMAS@sakilacustomer.org"
SELECT * FROM Payment 
INNER JOIN Customer ON Payment.Customer_ID = Customer.Customer_ID 
WHERE Customer.Email = 'NANCY.THOMAS@sakilacustomer.org';

6. Use a View to get the film info for actor Bob Fawcett.
SELECT Film_info FROM Actor_info WHERE First_name = 'Bob' AND Last_name = 'Fawcett';

7. Use a Stored Procedure to get the 4 inventory ids for the film "Alien Center" at Store #2. 
No stored procedures available that would do this, but can be done with a SELECT:
SELECT Inventory_id FROM Inventory WHERE film_id = 15 AND Store_id = 2;

Can also be done with a nested query just to make sure it always gets the right film_id for Alien Center:
SELECT Inventory_id FROM Inventory WHERE film_id = (SELECT Film_id FROM Film WHERE Title = 'Alien Center') AND Store_id = 2; 

8. Insert a new store. Ensure that you use TRANSACTION. (This one is possible but it's tough! Pay attention to constraints and the order that you are inserting data.)
START TRANSACTION; 
INSERT INTO Staff (First_name, Last_name, Address_id, Email, Store_id, active, username)
VALUES ('Test', 'Staff', 5, 'test@example.com', 2, 1, 'Test');
INSERT INTO Store (Manager_staff_id, Address_id) VALUES (18, 3);
ROLLBACK;

9. Update the timestamp to the current date/time for the new store you entered in the previous question. 
UPDATE Store SET last_update = NOW() WHERE store_id = 8;

10. Delete the new store. 
DELETE FROM Store WHERE Store_id = 3;